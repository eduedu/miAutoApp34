{"Name":"VectorCompat","Id":2338,"Alias":"VectorCompat","Description":"\n\u003ciframe src=\"https://appetize.io/embed/87xj62bnqj8znf0drwy4g5an4r?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\u0026osVersion=4.4\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float:right;margin-left:1em;\"\u003e\u003c/iframe\u003e\n\nA support library for [`VectorDrawable`][1] and [`AnimatedVectorDrawable`][2] \nintroduced in Lollipop with fully backwards compatible tint support (api 14+ \nso far).\n\n`vector-compat` provides the necessary tools to make animated icons similar to \nthe new drawer hamburger icon that morphs to a back arrow when clicked. Any \nother morph animation between icons can be defined _purely in `xml` (**no \ncode required**)_ and the library takes care of the transformation animation. \nBecause they are in vector format, these drawables can be of any height and \nwidth with no resulting pixelation.\n\nThe library will transparently fall back to the lollipop implementation of \n`VectorDrawable` and `AnimatedVectorDrawable` on api 21+ devices\n\n## Commonly Animations\nThe library packs some ready-made morph animations developers can use in \ntheir code with `MorphButton`. More will be added soon as this is a \nwork-in-progress. The library has the following morph animations:\n\n * Play-Pause morph animation (bi-directional morph)\n * Play-Stop morph animation (bi-directional morph)\n * Arrow-Hamburger menu morph animation (bi-directional morph)\n\n## Usage\n`VectorDrawable` and `AnimatedVectorDrawable` xml drawable syntax is exactly \nthe same as the lollipop documentation (can be seen [here][1] and [here][2] \nrespectively). With 2 caveats: \n\n * Some attributes under the `\u003cvector\u003e` nodes must be listed once for the \n   `android:` namespace and once for the local namespace with a `vc_` prefix \n   (e.g. `app:vc_fillColor`). (For a complete list of `vc_` prefixed attributes \n   see [attr.xml][6])  \n   See example [here][4]. \n * Any `pathType` anim xml must have the `android:valueType=\"pathType\"` in \n   addition to `app:vc_valueType=\"pathType\"` to allow for lollipop implementation \n   fallback.  \n   See example [here][5].\n\n\n### Inflation\n`VectorDrawable` and `AnimatedVectorDrawable` in this support library can be \ninflated in one of 2 ways:\n\n#### Static `GetDrawable()` Methods\n\n    // This will only inflate a drawable with \u003cvector\u003e as the root element\n    VectorDrawable.GetDrawable(context, Resource.Drawable.ic_arrow_vector);\n    \n    // This will only inflate a drawable with \u003canimated-vector\u003e as the root element\n    AnimatedVectorDrawable.GetDrawable(context, Resource.Drawable.ic_arrow_to_menu_animated_vector);\n    \n    // This will inflate any drawable and will auto-fallback to the lollipop implementation on api 21+ devices\n    ResourcesCompat.getDrawable(context, Resource.Drawable.any_drawable);\n\n_If inflating the `Drawable` in code, it is recommended to always use \n`ResourcesCompat.GetDrawable()` as this handles Lollipop fallback when \napplicable. This allows the system to cache `Drawable ConstantState` and hence \nis more efficient._\n\n#### Directly From `MorphButton` XML\n\n    \u003ccom.wnafee.vector.MorphButton\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/playPauseBtn\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:vc_startDrawable=\"@drawable/ic_pause_to_play\"\n        app:vc_endDrawable=\"@drawable/ic_play_to_pause\" /\u003e \n\n### MorphButton\nA `MorphButton` is a `CompoundButton` with 2 states: `MorphState.Start` or \n`MorphState.End`. The attributes `vc_startDrawable` and `vc_endDrawable` define \nwhich foreground drawables to use for the button depending on the button\u0027s state. \n\nThese can be any type of drawable (e.g. `BitmapDrawable`, `ColorDrawable`, \n`VectorDrawable`, `AnimatedVectorDrawable` etc.)\n\nTo use MorphButton in your app, make sure to include the `morphButtonStyle` item \nin your base app theme:\n\n    \u003cstyle name=\"MyAppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003citem name=\"morphButtonStyle\"\u003e@style/Widget.MorphButton\u003c/item\u003e\n    \u003c/style\u003e\n\n\n`MorphButtons` allow you to tint your foreground drawables (i.e. \n`vc_startDrawable` and `vc_endDrawable`) and background drawable separately \nin both xml and java. See the following examples for defining `MorphButtons`:\n\n#### XML\n\n    \u003ccom.wnafee.vector.MorphButton\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/drawerBtn\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:scaleType=\"fitCenter\"\n        app:vc_backgroundTint=\"#f50057\"\n        app:vc_foregroundTint=\"#3F51B5\"\n        app:vc_startDrawable=\"@drawable/ic_arrow_to_drawer\"\n        app:vc_endDrawable=\"@drawable/ic_drawer_to_arrow\" /\u003e\n\n\n#### Code\n\n    MorphButton mb = new MorphButton(this);\n    mb.BackgroundTintList = Resources.GetColorStateList(Resource.Color.background_tint_color);\n    mb.ForegroundTintList = ColorStateList.ValueOf(Color.Red);\n    mb.SetStartDrawable(Resource.Drawable.ic_pause_to_play);\n    mb.SetEndDrawable(Resource.Drawable.ic_play_to_pause);\n    mb.State = MorphButton.MorphState.End;\n\nThe `scaleType` attribute defines how to scale the foreground drawable to fill \nthe button\u0027s background. This is the same as [`ImageView.ScaleType`][7] which \nyou can take a look at [here][7].\n\nButton clicks will toggle between the foreground drawables. If the drawables \nhappen to implement the [`IAnimatable`][3] interface (e.g. `AnimatedVectorDrawable` \nor `AnimationDrawable`) then `Start()` will be automatically called to animate \nbetween the start and end drawables defined in xml.\n \nMorphButton states can be set manually, using eitehr the `State` property or\n`SetState` method:\n\n    // transition with no animation\n    morphButton.State = MorphButton.MorphState.End; \n    \n    // or transition with animation if drawable is IAnimatable\n    morphButton.SetState (MorphButton.MorphState.Start, true); \n\nIf you need to be informed of button state changes, you can subscribe to the \n`StateChanged` event:\n\n    morphButton.StateChanged += (sender, e) =\u003e {\n        // changeTo is the new state\n        MorphButton.MorphState changedTo = e.ChangedTo;\n\n        // isAnimating = true if the state changed with animation\n        bool isAnimating = e.IsAnimating;\n    };\n\n[1]: http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html\n[2]: http://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html\n[3]: http://developer.android.com/reference/android/graphics/drawable/Animatable.html\n[4]: https://github.com/wnafee/vector-compat/blob/master/library/src/main/res/drawable/ic_arrow_vector.xml\n[5]: https://github.com/wnafee/vector-compat/blob/master/library/src/main/res/anim/arrow_to_drawer_path.xml\n[6]: https://github.com/wnafee/vector-compat/blob/master/library/src/main/res/values/attr.xml\n[7]: http://developer.android.com/reference/android/widget/ImageView.ScaleType.html\n","Version":"1.0.5.0","Summary":"A support library for VectorDrawable and AnimatedVectorDrawable classes introduced in Lollipop.","QuickStart":"\nA support library for [`VectorDrawable`][1] and [`AnimatedVectorDrawable`][2] \nintroduced in Lollipop with fully backwards compatible tint support (api 14+ \nso far).\n\n`vector-compat` provides the necessary tools to make animated icons similar to \nthe new drawer hamburger icon that morphs to a back arrow when clicked. Any \nother morph animation between icons can be defined _purely in `xml` (**no \ncode required**)_ and the library takes care of the transformation animation. \nBecause they are in vector format, these drawables can be of any height and \nwidth with no resulting pixelation.\n\nThe library will transparently fall back to the lollipop implementation of \n`VectorDrawable` and `AnimatedVectorDrawable` on api 21+ devices\n\n## Commonly Animations\nThe library packs some ready-made morph animations developers can use in \ntheir code with `MorphButton`. More will be added soon as this is a \nwork-in-progress. The library has the following morph animations:\n\n * Play-Pause morph animation (bi-directional morph)\n * Play-Stop morph animation (bi-directional morph)\n * Arrow-Hamburger menu morph animation (bi-directional morph)\n\n## Usage\n`VectorDrawable` and `AnimatedVectorDrawable` xml drawable syntax is exactly \nthe same as the lollipop documentation (can be seen [here][1] and [here][2] \nrespectively). With 2 caveats: \n\n * Some attributes under the `\u003cvector\u003e` nodes must be listed once for the \n   `android:` namespace and once for the local namespace with a `vc_` prefix \n   (e.g. `app:vc_fillColor`). (For a complete list of `vc_` prefixed attributes \n   see [attr.xml][6])  \n   See example [here][4]. \n * Any `pathType` anim xml must have the `android:valueType=\"pathType\"` in \n   addition to `app:vc_valueType=\"pathType\"` to allow for lollipop implementation \n   fallback.  \n   See example [here][5].\n\n\n### Inflation\n`VectorDrawable` and `AnimatedVectorDrawable` in this support library can be \ninflated in one of 2 ways:\n\n#### Static `GetDrawable()` Methods\n\n    // This will only inflate a drawable with \u003cvector\u003e as the root element\n    VectorDrawable.GetDrawable(context, Resource.Drawable.ic_arrow_vector);\n    \n    // This will only inflate a drawable with \u003canimated-vector\u003e as the root element\n    AnimatedVectorDrawable.GetDrawable(context, Resource.Drawable.ic_arrow_to_menu_animated_vector);\n    \n    // This will inflate any drawable and will auto-fallback to the lollipop implementation on api 21+ devices\n    ResourcesCompat.getDrawable(context, Resource.Drawable.any_drawable);\n\n_If inflating the `Drawable` in code, it is recommended to always use \n`ResourcesCompat.GetDrawable()` as this handles Lollipop fallback when \napplicable. This allows the system to cache `Drawable ConstantState` and hence \nis more efficient._\n\n#### Directly From `MorphButton` XML\n\n    \u003ccom.wnafee.vector.MorphButton\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/playPauseBtn\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:vc_startDrawable=\"@drawable/ic_pause_to_play\"\n        app:vc_endDrawable=\"@drawable/ic_play_to_pause\" /\u003e \n\n### MorphButton\nA `MorphButton` is a `CompoundButton` with 2 states: `MorphState.Start` or \n`MorphState.End`. The attributes `vc_startDrawable` and `vc_endDrawable` define \nwhich foreground drawables to use for the button depending on the button\u0027s state. \n\nThese can be any type of drawable (e.g. `BitmapDrawable`, `ColorDrawable`, \n`VectorDrawable`, `AnimatedVectorDrawable` etc.)\n\nTo use MorphButton in your app, make sure to include the `morphButtonStyle` item \nin your base app theme:\n\n    \u003cstyle name=\"MyAppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003citem name=\"morphButtonStyle\"\u003e@style/Widget.MorphButton\u003c/item\u003e\n    \u003c/style\u003e\n\n\n`MorphButtons` allow you to tint your foreground drawables (i.e. \n`vc_startDrawable` and `vc_endDrawable`) and background drawable separately \nin both xml and java. See the following examples for defining `MorphButtons`:\n\n#### XML\n\n    \u003ccom.wnafee.vector.MorphButton\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/drawerBtn\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:scaleType=\"fitCenter\"\n        app:vc_backgroundTint=\"#f50057\"\n        app:vc_foregroundTint=\"#3F51B5\"\n        app:vc_startDrawable=\"@drawable/ic_arrow_to_drawer\"\n        app:vc_endDrawable=\"@drawable/ic_drawer_to_arrow\" /\u003e\n\n\n#### Code\n\n    MorphButton mb = new MorphButton(this);\n    mb.BackgroundTintList = Resources.GetColorStateList(Resource.Color.background_tint_color);\n    mb.ForegroundTintList = ColorStateList.ValueOf(Color.Red);\n    mb.SetStartDrawable(Resource.Drawable.ic_pause_to_play);\n    mb.SetEndDrawable(Resource.Drawable.ic_play_to_pause);\n    mb.State = MorphButton.MorphState.End;\n\nThe `scaleType` attribute defines how to scale the foreground drawable to fill \nthe button\u0027s background. This is the same as [`ImageView.ScaleType`][7] which \nyou can take a look at [here][7].\n\nButton clicks will toggle between the foreground drawables. If the drawables \nhappen to implement the [`IAnimatable`][3] interface (e.g. `AnimatedVectorDrawable` \nor `AnimationDrawable`) then `Start()` will be automatically called to animate \nbetween the start and end drawables defined in xml.\n \nMorphButton states can be set manually, using eitehr the `State` property or\n`SetState` method:\n\n    // transition with no animation\n    morphButton.State = MorphButton.MorphState.End; \n    \n    // or transition with animation if drawable is IAnimatable\n    morphButton.SetState (MorphButton.MorphState.Start, true); \n\nIf you need to be informed of button state changes, you can subscribe to the \n`StateChanged` event:\n\n    morphButton.StateChanged += (sender, e) =\u003e {\n        // changeTo is the new state\n        MorphButton.MorphState changedTo = e.ChangedTo;\n\n        // isAnimating = true if the state changed with animation\n        bool isAnimating = e.IsAnimating;\n    };\n\n[1]: http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html\n[2]: http://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html\n[3]: http://developer.android.com/reference/android/graphics/drawable/Animatable.html\n[4]: https://github.com/wnafee/vector-compat/blob/master/library/src/main/res/drawable/ic_arrow_vector.xml\n[5]: https://github.com/wnafee/vector-compat/blob/master/library/src/main/res/anim/arrow_to_drawer_path.xml\n[6]: https://github.com/wnafee/vector-compat/blob/master/library/src/main/res/values/attr.xml\n[7]: http://developer.android.com/reference/android/widget/ImageView.ScaleType.html\n","Hash":"c63588329842a77b818804ca8dc119bd","TargetPlatforms":["android"],"TrialHash":null}